{"entries":[{"timestamp":1733724950156,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let a1: number;\nlet a2: number;\nlet i1: number;\nlet i2: number;\nlet a3: number;\nfunction a(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction b(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 6, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction c(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 3 + spacing\n}\n\n//  width of letter\nfunction d(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 3, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction e(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.hline(x, y + 4, 3, 1)\n    OLED12864_I2C.pixel(x, y + 5, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 3 + spacing\n}\n\n//  width of letter\nfunction f(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 2, y, 1)\n    OLED12864_I2C.pixel(x + 1, y + 1, 1)\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    OLED12864_I2C.vline(x + 1, y + 2, 5, 1)\n    OLED12864_I2C.hline(x + 0, y + 3, 3, 1)\n    return 3 + spacing\n}\n\n//  width of letter\nfunction g(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 2, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 9, 1)\n    OLED12864_I2C.pixel(x + 1, y + 9, 1)\n    OLED12864_I2C.pixel(x, y + 8, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction h(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 4, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction i(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 0, y + 2, 1)\n    OLED12864_I2C.vline(x, y + 4, 3, 1)\n    return 1 + spacing\n}\n\n//  width of letter\nfunction j(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x, y + 2, 1)\n    OLED12864_I2C.vline(x, y + 4, 5, 1)\n    OLED12864_I2C.pixel(x - 2, y + 8, 1)\n    OLED12864_I2C.pixel(x - 1, y + 9, 1)\n    return 1 + spacing\n}\n\n//  width of letter\nfunction k(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 3, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction l(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    return 1 + spacing\n}\n\n//  width of letter\nfunction m(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.vline(x + 2, y + 4, 3, 1)\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    OLED12864_I2C.vline(x + 4, y + 4, 3, 1)\n    return 5 + spacing\n}\n\n//  width of letter\nfunction n(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 4, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction o(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction p(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 8, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 6, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction q(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 3, y + 2, 8, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.vline(x + 0, y + 3, 3, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction r(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction s(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.pixel(x + 0, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.hline(x, y + 6, 2, 1)\n    return 3 + spacing\n}\n\n//  width of letter\nfunction t(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y + 3, 3, 1)\n    //  Horizontal line in middle\n    OLED12864_I2C.vline(x + 1, y, 7, 1)\n    //  Vertical line through center\n    return 3 + spacing\n}\n\n//  width of letter\nfunction u(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 4, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 2, 5, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    //  Bottom left curve\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    //  Bottom middle point\n    return 4 + spacing\n}\n\n//  width of letter\nfunction v(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 4, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 2, y + 2, 4, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    //  Bottom middle point\n    return 3 + spacing\n}\n\n//  width of letter\nfunction w(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 2, 4, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 2, y + 2, 4, 1)\n    //  Middle vertical line\n    OLED12864_I2C.vline(x + 4, y + 2, 4, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    //  Bottom left dot\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)\n    //  Bottom right dot\n    return 5 + spacing\n}\n\n//  width of letter\nfunction x_(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 1, y + 4, 2, 1)\n    //  Left middle vertical line\n    OLED12864_I2C.vline(x + 2, y + 4, 2, 1)\n    //  Right middle vertical line\n    OLED12864_I2C.pixel(x, y + 3, 1)\n    //  Top left dot\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    //  Top right dot\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    //  Bottom left dot\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)\n    //  Bottom right dot\n    return 4 + spacing\n}\n\n//  width of letter\nfunction y_(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 2, y + 5, 3, 1)\n    //  Middle vertical line\n    OLED12864_I2C.pixel(x, y + 3, 1)\n    //  Top left dot\n    OLED12864_I2C.pixel(x + 4, y + 3, 1)\n    //  Top right dot\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    //  Upper middle left dot\n    OLED12864_I2C.pixel(x + 3, y + 4, 1)\n    //  Upper middle right dot\n    OLED12864_I2C.pixel(x + 1, y + 8, 1)\n    //  Lower left curve dot\n    OLED12864_I2C.pixel(x, y + 9, 1)\n    //  Bottom dot\n    return 5 + spacing\n}\n\n//  width of letter\nfunction z_(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y + 3, 4, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x, y + 6, 4, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)\n    //  Upper middle dot\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    //  Lower middle dot\n    return 4 + spacing\n}\n\n//  width of letter\nfunction qs(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x, y + 1, 1)\n    //  Upper left curve dot\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    //  Middle dot\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    //  Lower middle dot\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    //  Bottom dot\n    return 4 + spacing\n}\n\n//  width of letter\nfunction dollar(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 2, y, 7, 1)\n    //  Vertical line\n    OLED12864_I2C.hline(x + 1, y + 1, 4, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x, y + 5, 4, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.pixel(x, y + 2, 1)\n    //  Top left pixel\n    OLED12864_I2C.pixel(x + 4, y + 4, 1)\n    //  Bottom right pixel\n    return 5 + spacing\n}\n\n//  width of letter\nfunction o_parenthesis(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 1, y, 1)\n    OLED12864_I2C.vline(x, y + 1, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    return 2 + spacing\n}\n\n//  width of character\nfunction c_parenthesis(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 1, y + 1, 5, 1)\n    OLED12864_I2C.pixel(x, y, 1)\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    return 2 + spacing\n}\n\n//  width of character\nfunction one(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x, y, 1)\n    //  Top dot\n    OLED12864_I2C.vline(x + 1, y, 6, 1)\n    //  Middle vertical line\n    OLED12864_I2C.hline(x, y + 6, 3, 1)\n    //  Bottom horizontal line\n    return 3 + spacing\n}\n\n//  width of letter\nfunction two(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.pixel(x, y + 1, 1)\n    //  Top left pixel\n    OLED12864_I2C.vline(x + 3, y + 1, 3, 1)\n    //  Vertical line\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    //  Middle pixel\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)\n    //  Middle pixel\n    OLED12864_I2C.hline(x, y + 6, 4, 1)\n    //  Bottom horizontal line\n    return 4 + spacing\n}\n\n//  width of letter\nfunction three(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)\n    //  Top vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)\n    //  Bottom vertical line\n    OLED12864_I2C.pixel(x, y + 1, 1)\n    //  Top left pixel\n    OLED12864_I2C.pixel(x, y + 5, 1)\n    //  Bottom left pixel\n    return 4 + spacing\n}\n\n//  width of letter\nfunction four(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 3, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y, 7, 1)\n    //  Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 4, 1)\n    //  Middle horizontal line\n    return 4 + spacing\n}\n\n//  width of letter\nfunction five(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y, 4, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x, y + 3, 3, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x, y + 6, 3, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y, 4, 1)\n    //  Left vertical line\n    OLED12864_I2C.pixel(x + 3, y + 4, 1)\n    //  Middle right pixel\n    OLED12864_I2C.pixel(x + 3, y + 5, 1)\n    //  Bottom right pixel\n    return 4 + spacing\n}\n\n//  width of letter\nfunction six(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    return 4 + spacing\n}\n\n//  width of letter\nfunction seven(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y, 5, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x + 4, y + 1, 2, 1)\n    //  Top right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    //  Middle pixel\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)\n    //  Lower middle pixel\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    //  Lower middle pixel\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    //  Bottom left pixel\n    return 5 + spacing\n}\n\n//  width of letter\nfunction eight(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)\n    //  Top left vertical line\n    OLED12864_I2C.vline(x, y + 4, 2, 1)\n    //  Bottom left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)\n    //  Top right vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)\n    //  Bottom right vertical line\n    return 4 + spacing\n}\n\n//  width of letter\nfunction nine(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)\n    //  Top left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x, y + 5, 1)\n    //  Middle pixel\n    return 4 + spacing\n}\n\n//  width of letter\nfunction zero(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)\n    //  Right vertical line\n    return 4 + spacing\n}\n\n//  width of letter\nfunction plus(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x + 2, y + 1, 5, 1)\n    //  Vertical line in the middle\n    OLED12864_I2C.hline(x, y + 3, 5, 1)\n    //  Horizontal line in the middle\n    return 5 + spacing\n}\n\n//  width of character\nfunction caps_w(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 6, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 4, y, 6, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)\n    //  Right middle vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    //  Left middle vertical line\n    OLED12864_I2C.vline(x + 2, y + 3, 3, 1)\n    //  Bottom middle pixel\n    return 5 + spacing\n}\n\n//  width of letter\nfunction caps_h(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y, 7, 1)\n    //  Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 4, 1)\n    //  Middle horizontal line\n    return 4 + spacing\n}\n\n//  width of letter\nfunction caps_p(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y, 3, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x, y, 7, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)\n    //  Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 3, 1)\n    //  Middle horizontal line\n    return 4 + spacing\n}\n\n//  width of character\nfunction caps_a(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x + 2, y, 1)\n    //  Pixel at (x+2, y)\n    OLED12864_I2C.pixel(x + 1, y + 1, 1)\n    //  Pixel at (x+1, y+1)\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    //  Pixel at (x+3, y+1)\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    //  Vertical line from (x, y+2) to (x, y+6)\n    OLED12864_I2C.vline(x + 4, y + 2, 5, 1)\n    //  Vertical line from (x+4, y+2) to (x+4, y+6)\n    OLED12864_I2C.hline(x, y + 3, 5, 1)\n    //  Horizontal line from (x, y+3) to (x+4, y+3)\n    return 5 + spacing\n}\n\n//  width of character\nfunction caps_o(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)\n    //  Right vertical line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    return 4 + spacing\n}\n\n//  width of character\nfunction caps_s(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)\n    //  Top vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)\n    //  Bottom vertical line\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    //  Top right pixel\n    OLED12864_I2C.pixel(x, y + 5, 1)\n    //  Bottom left pixel\n    return 4 + spacing\n}\n\n//  width of character\nfunction caps_n(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    //  Left vertical line\n    OLED12864_I2C.vline(x + 4, y, 7, 1)\n    //  Right vertical line\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    //  Top left pixel\n    OLED12864_I2C.vline(x + 1, y + 1, 2, 1)\n    //  Left vertical line inside\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)\n    //  Right vertical line inside\n    return 5 + spacing\n}\n\n//  width of character\nfunction caps_d(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    //  Left vertical line\n    OLED12864_I2C.hline(x + 1, y, 2, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    //  Bottom horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)\n    //  Right vertical line\n    return 4 + spacing\n}\n\n//  width of character\nfunction caps_y(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x, y, 1)\n    //  Top left pixel\n    OLED12864_I2C.pixel(x + 4, y, 1)\n    //  Top right pixel\n    OLED12864_I2C.pixel(x + 1, y + 1, 1)\n    //  Second row left pixel\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    //  Second row right pixel\n    OLED12864_I2C.vline(x + 2, y + 2, 5, 1)\n    //  Vertical line in the middle\n    return 5 + spacing\n}\n\n//  width of character\nfunction caps_t(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y, 5, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x + 2, y + 1, 6, 1)\n    //  Vertical line in the middle\n    return 5 + spacing\n}\n\n//  width of character\nfunction caps_i(x: number, y: number, spacing: number) {\n    OLED12864_I2C.hline(x, y, 3, 1)\n    //  Top horizontal line\n    OLED12864_I2C.vline(x + 1, y + 1, 5, 1)\n    //  Vertical line in the middle\n    OLED12864_I2C.hline(x, y + 6, 3, 1)\n    //  Bottom horizontal line\n    return 3 + spacing\n}\n\n//  width of character\nfunction caps_e(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 7, 1)\n    //  Left vertical line\n    OLED12864_I2C.hline(x + 1, y, 3, 1)\n    //  Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1)\n    //  Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 3, 1)\n    //  Bottom horizontal line\n    return 4 + spacing\n}\n\n//  width of character\nfunction period(x: number, y: number, spacing: number) {\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    return 1 + spacing\n}\n\n//  width of character\nfunction apostrophe(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 3, 1)\n    return 1 + spacing\n}\n\nfunction quotations(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y, 3, 1)\n    OLED12864_I2C.vline(x + 2, y, 3, 1)\n    return 3 + spacing\n}\n\nfunction comma(x: number, y: number, spacing: number) {\n    OLED12864_I2C.vline(x, y + 6, 2, 1)\n    OLED12864_I2C.pixel(x - 1, y + 8, 1)\n    return 1 + spacing\n}\n\nfunction space(): number {\n    return 1\n}\n\n//  Draw each letter and update x position\nOLED12864_I2C.clear()\nfunction draw_text(text: string, x: number, y: number, spacing: number) {\n    for (let char of text) {\n        if (x >= 124) {\n            x = 0\n            y += 10\n        }\n        \n        if (char == \"a\") {\n            x += a(x, y, spacing)\n        } else if (char == \"b\") {\n            x += b(x, y, spacing)\n        } else if (char == \"c\") {\n            x += c(x, y, spacing)\n        } else if (char == \"d\") {\n            x += d(x, y, spacing)\n        } else if (char == \"e\") {\n            x += e(x, y, spacing)\n        } else if (char == \"f\") {\n            x += f(x, y, spacing)\n        } else if (char == \"g\") {\n            x += g(x, y, spacing)\n        } else if (char == \"h\") {\n            x += h(x, y, spacing)\n        } else if (char == \"i\") {\n            x += i(x, y, spacing)\n        } else if (char == \"j\") {\n            x += j(x, y, spacing)\n        } else if (char == \"k\") {\n            x += k(x, y, spacing)\n        } else if (char == \"l\") {\n            x += l(x, y, spacing)\n        } else if (char == \"m\") {\n            x += m(x, y, spacing)\n        } else if (char == \"n\") {\n            x += n(x, y, spacing)\n        } else if (char == \"o\") {\n            x += o(x, y, spacing)\n        } else if (char == \"p\") {\n            x += p(x, y, spacing)\n        } else if (char == \"q\") {\n            x += q(x, y, spacing)\n        } else if (char == \"r\") {\n            x += r(x, y, spacing)\n        } else if (char == \"s\") {\n            x += s(x, y, spacing)\n        } else if (char == \"t\") {\n            x += t(x, y, spacing)\n        } else if (char == \"u\") {\n            x += u(x, y, spacing)\n        } else if (char == \"v\") {\n            x += v(x, y, spacing)\n        } else if (char == \"w\") {\n            x += w(x, y, spacing)\n        } else if (char == \"x\") {\n            x += x_(x, y, spacing)\n        } else if (char == \"y\") {\n            x += y_(x, y, spacing)\n        } else if (char == \"z\") {\n            x += z_(x, y, spacing)\n        } else if (char == \"?\") {\n            x += qs(x, y, spacing)\n        } else if (char == \" \") {\n            x += space()\n        } else if (char == \"^\") {\n            x = 0\n            y += 9\n        } else if (char == \"1\") {\n            x += one(x, y, spacing)\n        } else if (char == \"2\") {\n            x += two(x, y, spacing)\n        } else if (char == \"3\") {\n            x += three(x, y, spacing)\n        } else if (char == \"4\") {\n            x += four(x, y, spacing)\n        } else if (char == \"5\") {\n            x += five(x, y, spacing)\n        } else if (char == \"6\") {\n            x += six(x, y, spacing)\n        } else if (char == \"7\") {\n            x += seven(x, y, spacing)\n        } else if (char == \"8\") {\n            x += eight(x, y, spacing)\n        } else if (char == \"9\") {\n            x += nine(x, y, spacing)\n        } else if (char == \"0\") {\n            x += zero(x, y, spacing)\n        } else if (char == \"W\") {\n            x += caps_w(x, y, spacing)\n        } else if (char == \"H\") {\n            x += caps_h(x, y, spacing)\n        } else if (char == \"$\") {\n            x += dollar(x, y, spacing)\n        } else if (char == \"(\") {\n            x += o_parenthesis(x, y, spacing)\n        } else if (char == \")\") {\n            x += c_parenthesis(x, y, spacing)\n        } else if (char == \".\") {\n            x += period(x, y, spacing)\n        } else if (char == \"P\") {\n            x += caps_p(x, y, spacing)\n        } else if (char == \"A\") {\n            x += caps_a(x, y, spacing)\n        } else if (char == \"O\") {\n            x += caps_o(x, y, spacing)\n        } else if (char == \"S\") {\n            x += caps_s(x, y, spacing)\n        } else if (char == \"N\") {\n            x += caps_n(x, y, spacing)\n        } else if (char == \"+\") {\n            x += plus(x, y, spacing)\n        } else if (char == \"D\") {\n            x += caps_d(x, y, spacing)\n        } else if (char == \"Y\") {\n            x += caps_y(x, y, spacing)\n        } else if (char == \"T\") {\n            x += caps_t(x, y, spacing)\n        } else if (char == \"I\") {\n            x += caps_i(x, y, spacing)\n        } else if (char == \"E\") {\n            x += caps_e(x, y, spacing)\n        } else if (char == \"'\") {\n            x += apostrophe(x, y, spacing)\n        } else if (char == \"\\\"\") {\n            x += quotations(x, y, spacing)\n        } else if (char == \",\") {\n            x += comma(x, y, spacing)\n        }\n        \n    }\n}\n\nfunction you_chose(selection: string, y: number) {\n    draw_text(\"You chose \" + selection + \".\", 0, y, spacing)\n    basic.pause(2000)\n}\n\n// ACTUAL CODE IS BELOW, NORMAL FUNCTIONS ABOVE\npins.setPull(DigitalPin.P0, PinPullMode.PullUp)\npins.setPull(DigitalPin.P1, PinPullMode.PullUp)\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\nlet x = 0\n//  starting x position\nlet y = 0\n//  starting y position\nlet spacing = 1\n//  space between letters\ndraw_text(\"Preferred operating system?^1.  Android^2.  iOS^3.  No preference\", x, y, spacing)\nlet answered = false\nwhile (!answered) {\n    if (pins.digitalReadPin(DigitalPin.P0) == 0) {\n        answered = true\n        a1 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"Android\", 9)\n    } else if (pins.digitalReadPin(DigitalPin.P1) == 0) {\n        answered = true\n        a1 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"iOS\", 18)\n    } else if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        answered = true\n        a1 = 3\n        OLED12864_I2C.clear()\n        draw_text(\"You did not have a preference.\", x, 27, spacing)\n        basic.pause(2000)\n    }\n    \n}\nOLED12864_I2C.clear()\nanswered = false\ndraw_text(\"What is your budget?^1.  $600 and below^2.  $600 to $900^3.  $900 and above\", x, y, spacing)\nwhile (!answered) {\n    if (pins.digitalReadPin(DigitalPin.P0) == 0) {\n        answered = true\n        a2 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"$600 and below\", 9)\n    } else if (pins.digitalReadPin(DigitalPin.P1) == 0) {\n        answered = true\n        a2 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"$600 to $900\", 18)\n    } else if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        answered = true\n        a2 = 3\n        OLED12864_I2C.clear()\n        you_chose(\"$900 and above\", 27)\n    }\n    \n}\nOLED12864_I2C.clear()\nlet iPhoneSE = a1 == 2 && a2 == 1\nif (iPhoneSE) {\n    draw_text(\"A decision has been reached.^We recommend an iPhone SE.^It's the only iPhone under $600.^It is $399.\", x, y, spacing)\n    while (true) {\n        basic.pause(1)\n    }\n}\n\nlet sixtyHziPhone = a1 == 2 && a2 != 3\nanswered = false\nif (!sixtyHziPhone) {\n    draw_text(\"Desired refresh rate?^1.  60Hz^2.  90Hz^3.  120Hz+\", x, y, spacing)\n} else {\n    draw_text(\"6.1\\\" or 6.7\\\" screen size?^1.  6.1\\\"^2.  6.7\\\"^3.  No preference \", x, y, spacing)\n    while (!answered) {\n        if (pins.digitalReadPin(DigitalPin.P0) == 0) {\n            answered = true\n            i1 = 1\n            OLED12864_I2C.clear()\n            you_chose(\"6.1\\\"\", 9)\n        } else if (pins.digitalReadPin(DigitalPin.P1) == 0) {\n            answered = true\n            i1 = 2\n            OLED12864_I2C.clear()\n            you_chose(\"6.7\\\"\", 18)\n        } else if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            answered = true\n            i1 = 3\n            OLED12864_I2C.clear()\n            draw_text(\"You did not have a preference.\", x, 27, spacing)\n            basic.pause(2000)\n        }\n        \n    }\n    OLED12864_I2C.clear()\n    if (i1 == 1) {\n        draw_text(\"A decision has been reached.^We recommend an iPhone 16.^It's $799, within your budget.^It also has a 6.1 inch display.\", x, y, spacing)\n        while (true) {\n            basic.pause(1)\n        }\n    }\n    \n    if (i1 == 2) {\n        draw_text(\"A decision has been reached.^We recommend an iPhone 16 Plus.^It's $899, barely in the budget.^It has a 6.7 inch display as well.\", x, y, spacing)\n        while (true) {\n            basic.pause(1)\n        }\n    }\n    \n    if (i1 == 3) {\n        draw_text(\"Is $100 for a few more hours of^ battery life worth it to you?^1.  A few more hours is worth it^2.  I don't have a need for it\", x, y, spacing)\n        answered = false\n        while (!answered) {\n            if (pins.digitalReadPin(DigitalPin.P0) == 0) {\n                answered = true\n                i2 = 1\n                OLED12864_I2C.clear()\n                draw_text(\"You chose that it's worth it.\", x, 9, spacing)\n                basic.pause(2000)\n            } else if (pins.digitalReadPin(DigitalPin.P1) == 0) {\n                answered = true\n                i2 = 2\n                OLED12864_I2C.clear()\n                draw_text(\"You chose it's not worth it.\", x, 18, spacing)\n                basic.pause(2000)\n            }\n            \n        }\n        OLED12864_I2C.clear()\n        if (i2 == 1) {\n            draw_text(\"A decision has been reached.^We recommend an iPhone 16 Plus.^It's $899, barely in the budget.^It has the extra battery as well.\", x, y, spacing)\n            while (true) {\n                basic.pause(1)\n            }\n        }\n        \n        if (i2 == 2) {\n            draw_text(\"A decision has been reached.^We recommend an iPhone 16.^It's $799, within the budget.^It still has great battery life.\", x, y, spacing)\n            while (true) {\n                basic.pause(1)\n            }\n        }\n        \n    }\n    \n    answered = true\n}\n\nwhile (!answered) {\n    if (pins.digitalReadPin(DigitalPin.P0) == 0) {\n        answered = true\n        a3 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"60Hz\", 9)\n    } else if (pins.digitalReadPin(DigitalPin.P1) == 0) {\n        answered = true\n        a3 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"90Hz\", 18)\n    } else if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        answered = true\n        a3 = 3\n        OLED12864_I2C.clear()\n        you_chose(\"120Hz+\", 27)\n    }\n    \n}\ndraw_text(\"Currently under construction.\", 0, 0, 0)"],[0,"\n"]],"start1":0,"start2":0,"length1":30396,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"OLED12864_I2C\": \"github:makecode-extensions/OLED12864_I2C_V2#v1.0.0\""],[0,"\n   "]],"start1":138,"start2":138,"length1":87,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":222,"start2":222,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.py","value":"def a(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    return 4 + spacing  # width of letter\n\ndef b(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 6, 1)\n    return 4 + spacing  # width of letter\n\ndef c(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 3 + spacing # width of letter\n\ndef d(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 3, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    return 4 + spacing  # width of letter\n\ndef e(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.hline(x, y + 4, 3, 1)\n    OLED12864_I2C.pixel(x, y + 5, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 3 + spacing  # width of letter\n\ndef f(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 2, y, 1)\n    OLED12864_I2C.pixel(x + 1, y + 1, 1)\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    OLED12864_I2C.vline(x + 1, y + 2, 5, 1)\n    OLED12864_I2C.hline(x + 0, y + 3, 3, 1)\n    return 3 + spacing  # width of letter\n\ndef g(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 2, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 9, 1)\n    OLED12864_I2C.pixel(x + 1, y + 9, 1)\n    OLED12864_I2C.pixel(x, y + 8, 1)\n    return 4 + spacing  # width of letter\n\ndef h(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 4, 1)\n    return 4 + spacing  # width of letter\n\ndef i(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 0, y + 2, 1)\n    OLED12864_I2C.vline(x, y + 4, 3, 1)\n    return 1 + spacing # width of letter\n\ndef j(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x, y + 2, 1)\n    OLED12864_I2C.vline(x, y + 4, 5, 1)\n    OLED12864_I2C.pixel(x - 2, y + 8, 1)\n    OLED12864_I2C.pixel(x - 1, y + 9, 1)\n    return 1 + spacing  # width of letter\n\ndef k(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)\n    OLED12864_I2C.pixel(x + 3, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)\n    return 4 + spacing  # width of letter\n\ndef l(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)\n    return 1 + spacing  # width of letter\n\ndef m(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.vline(x + 2, y + 4, 3, 1)\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    OLED12864_I2C.vline(x + 4, y + 4, 3, 1)\n    return 5 + spacing  # width of letter\n\ndef n(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 4, 1)\n    return 4 + spacing  # width of letter\n\ndef o(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.vline(x, y + 3, 3, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)\n    return 4 + spacing  # width of letter\n\ndef p(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 8, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.pixel(x + 2, y + 6, 1)\n    OLED12864_I2C.vline(x + 3, y + 3, 3, 1)\n    return 4 + spacing  # width of letter\n\ndef q(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 3, y + 2, 8, 1)\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 2, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    OLED12864_I2C.vline(x + 0, y + 3, 3, 1)\n    return 4 + spacing  # width of letter\n\ndef r(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 5, 1)\n    OLED12864_I2C.pixel(x + 2, y + 2, 1)\n    OLED12864_I2C.pixel(x + 1, y + 3, 1)\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)\n    return 4 + spacing  # width of letter\n\ndef s(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y + 2, 2, 1)\n    OLED12864_I2C.pixel(x + 0, y + 3, 1)\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)\n    OLED12864_I2C.hline(x, y + 6, 2, 1)\n    return 3 + spacing  # width of letter\n\ndef t(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y + 3, 3, 1)      # Horizontal line in middle\n    OLED12864_I2C.vline(x + 1, y, 7, 1)  # Vertical line through center\n    return 3 + spacing  # width of letter\n\ndef u(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 4, 1)      # Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 2, 5, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)     # Bottom left curve\n    OLED12864_I2C.pixel(x + 2, y + 5, 1)     # Bottom middle point\n    return 4 + spacing  # width of letter\n\ndef v(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 4, 1)      # Left vertical line\n    OLED12864_I2C.vline(x + 2, y + 2, 4, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)     # Bottom middle point\n    return 3 + spacing  # width of letter\n\ndef w(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 2, 4, 1)      # Left vertical line\n    OLED12864_I2C.vline(x + 2, y + 2, 4, 1)  # Middle vertical line\n    OLED12864_I2C.vline(x + 4, y + 2, 4, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)     # Bottom left dot\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)     # Bottom right dot\n    return 5 + spacing  # width of letter\n\ndef x_(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 1, y + 4, 2, 1)  # Left middle vertical line\n    OLED12864_I2C.vline(x + 2, y + 4, 2, 1)  # Right middle vertical line\n    OLED12864_I2C.pixel(x, y + 3, 1)         # Top left dot\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)     # Top right dot\n    OLED12864_I2C.pixel(x, y + 6, 1)         # Bottom left dot\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)     # Bottom right dot\n    return 4 + spacing  # width of letter\n\ndef y_(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 2, y + 5, 3, 1)  # Middle vertical line\n    OLED12864_I2C.pixel(x, y + 3, 1)         # Top left dot\n    OLED12864_I2C.pixel(x + 4, y + 3, 1)     # Top right dot\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)     # Upper middle left dot\n    OLED12864_I2C.pixel(x + 3, y + 4, 1)     # Upper middle right dot\n    OLED12864_I2C.pixel(x + 1, y + 8, 1)     # Lower left curve dot\n    OLED12864_I2C.pixel(x, y + 9, 1)         # Bottom dot\n    return 5 + spacing  # width of letter\n\ndef z_(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y + 3, 4, 1)     # Top horizontal line\n    OLED12864_I2C.hline(x, y + 6, 4, 1)     # Bottom horizontal line\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)    # Upper middle dot\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)    # Lower middle dot\n    return 4 + spacing  # width of letter\n\ndef qs(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)      # Top horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x, y + 1, 1)         # Upper left curve dot\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)     # Middle dot\n    OLED12864_I2C.pixel(x + 1, y + 4, 1)     # Lower middle dot\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)     # Bottom dot\n    return 4 + spacing  # width of letter\n\ndef dollar(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 2, y, 7, 1)  # Vertical line\n    OLED12864_I2C.hline(x + 1, y + 1, 4, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x, y + 5, 4, 1)  # Bottom horizontal line\n    OLED12864_I2C.pixel(x, y + 2, 1)  # Top left pixel\n    OLED12864_I2C.pixel(x + 4, y + 4, 1)  # Bottom right pixel\n    return 5 + spacing  # width of letter\n\ndef o_parenthesis(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 1, y, 1)\n    OLED12864_I2C.vline(x, y + 1, 5, 1)\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)\n    return 2 + spacing  # width of character\n\ndef c_parenthesis(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 1, y + 1, 5, 1)\n    OLED12864_I2C.pixel(x, y, 1)\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    return 2 + spacing  # width of character\n\ndef one(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x, y, 1)         # Top dot\n    OLED12864_I2C.vline(x + 1, y, 6, 1)  # Middle vertical line\n    OLED12864_I2C.hline(x, y + 6, 3, 1)      # Bottom horizontal line\n    return 3 + spacing  # width of letter\n\ndef two(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.pixel(x, y + 1, 1)  # Top left pixel\n    OLED12864_I2C.vline(x + 3, y + 1, 3, 1)  # Vertical line\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)  # Middle pixel\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)  # Middle pixel\n    OLED12864_I2C.hline(x, y + 6, 4, 1)  # Bottom horizontal line\n    return 4 + spacing  # width of letter\n\ndef three(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)  # Top vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)  # Bottom vertical line\n    OLED12864_I2C.pixel(x, y + 1, 1)  # Top left pixel\n    OLED12864_I2C.pixel(x, y + 5, 1)  # Bottom left pixel\n    return 4 + spacing  # width of letter\n\ndef four(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 3, 1)  # Left vertical line\n    OLED12864_I2C.vline(x + 3, y, 7, 1)  # Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 4, 1)  # Middle horizontal line\n    return 4 + spacing  # width of letter\n\ndef five(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y, 4, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x, y + 3, 3, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x, y + 6, 3, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x, y, 4, 1)  # Left vertical line\n    OLED12864_I2C.pixel(x + 3, y + 4, 1)  # Middle right pixel\n    OLED12864_I2C.pixel(x + 3, y + 5, 1)  # Bottom right pixel\n    return 4 + spacing  # width of letter\n\ndef six(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)  # Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)\n    return 4 + spacing  # width of letter\n\ndef seven(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y, 5, 1)  # Top horizontal line\n    OLED12864_I2C.vline(x + 4, y + 1, 2, 1)  # Top right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 3, 1)  # Middle pixel\n    OLED12864_I2C.pixel(x + 2, y + 4, 1)  # Lower middle pixel\n    OLED12864_I2C.pixel(x + 1, y + 5, 1)  # Lower middle pixel\n    OLED12864_I2C.pixel(x, y + 6, 1)  # Bottom left pixel\n    return 5 + spacing  # width of letter\n\ndef eight(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)  # Top left vertical line\n    OLED12864_I2C.vline(x, y + 4, 2, 1)  # Bottom left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)  # Top right vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1)  # Bottom right vertical line\n    return 4 + spacing  # width of letter\n\ndef nine(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1)  # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)  # Top left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x, y + 5, 1)  # Middle pixel\n    return 4 + spacing  # width of letter\n\ndef zero(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)  # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1)  # Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)  # Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1)  # Right vertical line\n    return 4 + spacing  # width of letter\n\ndef plus(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x + 2, y + 1, 5, 1)   # Vertical line in the middle\n    OLED12864_I2C.hline(x, y + 3, 5, 1)   # Horizontal line in the middle\n    return 5 + spacing  # width of character\n\ndef caps_w(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 6, 1)  # Left vertical line\n    OLED12864_I2C.vline(x + 4, y, 6, 1)  # Right vertical line\n    OLED12864_I2C.pixel(x + 3, y + 6, 1)  # Right middle vertical line\n    OLED12864_I2C.pixel(x + 1, y + 6, 1)  # Left middle vertical line\n    OLED12864_I2C.vline(x + 2, y + 3, 3, 1)  # Bottom middle pixel\n    return 5 + spacing  # width of letter\n\ndef caps_h(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)  # Left vertical line\n    OLED12864_I2C.vline(x + 3, y, 7, 1)  # Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 4, 1)  # Middle horizontal line\n    return 4 + spacing  # width of letter\n\ndef caps_p(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y, 3, 1)      # Top horizontal line\n    OLED12864_I2C.vline(x, y, 7, 1)      # Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 2, 1)  # Right vertical line\n    OLED12864_I2C.hline(x, y + 3, 3, 1)  # Middle horizontal line\n    return 4 + spacing  # width of character\n\ndef caps_a(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x + 2, y, 1)     # Pixel at (x+2, y)\n    OLED12864_I2C.pixel(x + 1, y + 1, 1) # Pixel at (x+1, y+1)\n    OLED12864_I2C.pixel(x + 3, y + 1, 1) # Pixel at (x+3, y+1)\n    OLED12864_I2C.vline(x, y + 2, 5, 1)  # Vertical line from (x, y+2) to (x, y+6)\n    OLED12864_I2C.vline(x + 4, y + 2, 5, 1)  # Vertical line from (x+4, y+2) to (x+4, y+6)\n    OLED12864_I2C.hline(x, y + 3, 5, 1)  # Horizontal line from (x, y+3) to (x+4, y+3)\n    return 5 + spacing  # width of character\n\ndef caps_o(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)     # Top horizontal line\n    OLED12864_I2C.vline(x, y + 1, 5, 1)     # Left vertical line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1) # Right vertical line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1) # Bottom horizontal line\n    return 4 + spacing  # width of character\n\ndef caps_s(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x + 1, y, 2, 1)     # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 2, 1) # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1) # Bottom horizontal line\n    OLED12864_I2C.vline(x, y + 1, 2, 1)     # Top vertical line\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1) # Bottom vertical line\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)    # Top right pixel\n    OLED12864_I2C.pixel(x, y + 5, 1)        # Bottom left pixel\n    return 4 + spacing  # width of character\n\ndef caps_n(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)       # Left vertical line\n    OLED12864_I2C.vline(x + 4, y, 7, 1)   # Right vertical line\n    OLED12864_I2C.pixel(x + 2, y + 3, 1)  # Top left pixel\n    OLED12864_I2C.vline(x + 1, y + 1, 2, 1) # Left vertical line inside\n    OLED12864_I2C.vline(x + 3, y + 4, 2, 1) # Right vertical line inside\n    return 5 + spacing  # width of character\n\ndef caps_d(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)       # Left vertical line\n    OLED12864_I2C.hline(x + 1, y, 2, 1)   # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 2, 1) # Bottom horizontal line\n    OLED12864_I2C.vline(x + 3, y + 1, 5, 1) # Right vertical line\n    return 4 + spacing  # width of character\n\ndef caps_y(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x, y, 1)          # Top left pixel\n    OLED12864_I2C.pixel(x + 4, y, 1)      # Top right pixel\n    OLED12864_I2C.pixel(x + 1, y + 1, 1)  # Second row left pixel\n    OLED12864_I2C.pixel(x + 3, y + 1, 1)  # Second row right pixel\n    OLED12864_I2C.vline(x + 2, y + 2, 5, 1) # Vertical line in the middle\n    return 5 + spacing  # width of character\n\ndef caps_t(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y, 5, 1)       # Top horizontal line\n    OLED12864_I2C.vline(x + 2, y + 1, 6, 1) # Vertical line in the middle\n    return 5 + spacing  # width of character\n\ndef caps_i(x: int, y: int, spacing: int):\n    OLED12864_I2C.hline(x, y, 3, 1)       # Top horizontal line\n    OLED12864_I2C.vline(x + 1, y + 1, 5, 1) # Vertical line in the middle\n    OLED12864_I2C.hline(x, y + 6, 3, 1)   # Bottom horizontal line\n    return 3 + spacing  # width of character\n\ndef caps_e(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 7, 1)       # Left vertical line\n    OLED12864_I2C.hline(x + 1, y, 3, 1)   # Top horizontal line\n    OLED12864_I2C.hline(x + 1, y + 3, 3, 1) # Middle horizontal line\n    OLED12864_I2C.hline(x + 1, y + 6, 3, 1) # Bottom horizontal line\n    return 4 + spacing  # width of character\n\ndef period(x: int, y: int, spacing: int):\n    OLED12864_I2C.pixel(x, y + 6, 1)\n    return 1 + spacing  # width of character\n\ndef apostrophe(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 3, 1)\n    return 1 + spacing\n\ndef quotations(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y, 3, 1)\n    OLED12864_I2C.vline(x + 2, y, 3, 1)\n    return 3 + spacing\n\ndef comma(x: int, y: int, spacing: int):\n    OLED12864_I2C.vline(x, y + 6, 2, 1)\n    OLED12864_I2C.pixel(x - 1, y + 8, 1)\n    return 1 + spacing\n\ndef space():\n    return 1\n\n# Draw each letter and update x position\nOLED12864_I2C.clear()\ndef draw_text(text: str, x: int, y: int, spacing: int):\n    for char in text:\n        if x >= 124:\n            x = 0\n            y += 10\n        if char == 'a':\n            x += a(x, y, spacing)\n        elif char == 'b':\n            x += b(x, y, spacing)\n        elif char == 'c':\n            x += c(x, y, spacing)\n        elif char == 'd':\n            x += d(x, y, spacing)\n        elif char == 'e':\n            x += e(x, y, spacing)\n        elif char == 'f':\n            x += f(x, y, spacing)\n        elif char == 'g':\n            x += g(x, y, spacing)\n        elif char == 'h':\n            x += h(x, y, spacing)\n        elif char == 'i':\n            x += i(x, y, spacing)\n        elif char == 'j':\n            x += j(x, y, spacing)\n        elif char == 'k':\n            x += k(x, y, spacing)\n        elif char == 'l':\n            x += l(x, y, spacing)\n        elif char == 'm':\n            x += m(x, y, spacing)\n        elif char == 'n':\n            x += n(x, y, spacing)\n        elif char == 'o':\n            x += o(x, y, spacing)\n        elif char == 'p':\n            x += p(x, y, spacing)\n        elif char == 'q':\n            x += q(x, y, spacing)\n        elif char == 'r':\n            x += r(x, y, spacing)\n        elif char == 's':\n            x += s(x, y, spacing)\n        elif char == 't':\n            x += t(x, y, spacing)\n        elif char == 'u':\n            x += u(x, y, spacing)\n        elif char == 'v':\n            x += v(x, y, spacing)\n        elif char == 'w':\n            x += w(x, y, spacing)\n        elif char == 'x':\n            x += x_(x, y, spacing)\n        elif char == 'y':\n            x += y_(x, y, spacing)\n        elif char == 'z':\n            x += z_(x, y, spacing)\n        elif char == '?':\n            x += qs(x, y, spacing)\n        elif char == ' ':\n            x += space()\n        elif char == '^':\n            x = 0\n            y += 9\n        elif char == '1':\n            x += one(x, y, spacing)\n        elif char == '2':\n            x += two(x, y, spacing)\n        elif char == '3':\n            x += three(x, y, spacing)\n        elif char == '4':\n            x += four(x, y, spacing)\n        elif char == '5':\n            x += five(x, y, spacing)\n        elif char == '6':\n            x += six(x, y, spacing)\n        elif char == '7':\n            x += seven(x, y, spacing)\n        elif char == '8':\n            x += eight(x, y, spacing)\n        elif char == '9':\n            x += nine(x, y, spacing)\n        elif char == '0':\n            x += zero(x, y, spacing)\n        elif char == 'W':\n            x += caps_w(x, y, spacing)\n        elif char == 'H':\n            x += caps_h(x, y, spacing)\n        elif char == '$':\n            x += dollar(x, y, spacing)\n        elif char == '(':\n            x += o_parenthesis(x, y, spacing)\n        elif char == ')':\n            x += c_parenthesis(x, y, spacing)\n        elif char == '.':\n            x += period(x, y, spacing)\n        elif char == 'P':\n            x += caps_p(x, y, spacing)\n        elif char == 'A':\n            x += caps_a(x, y, spacing)\n        elif char == 'O':\n            x += caps_o(x, y, spacing)\n        elif char == 'S':\n            x += caps_s(x, y, spacing)\n        elif char == 'N':\n            x += caps_n(x, y, spacing)\n        elif char == '+':\n            x += plus(x, y, spacing)\n        elif char == 'D':\n            x += caps_d(x, y, spacing)\n        elif char == 'Y':\n            x += caps_y(x, y, spacing)\n        elif char == 'T':\n            x += caps_t(x, y, spacing)\n        elif char == 'I':\n            x += caps_i(x, y, spacing)\n        elif char == 'E':\n            x += caps_e(x, y, spacing)\n        elif char == \"'\":\n            x += apostrophe(x, y, spacing)\n        elif char == '\"':\n            x += quotations(x, y, spacing)\n        elif char == ',':\n            x += comma(x, y, spacing)\n\ndef you_chose(selection, y):\n    draw_text(\"You chose \" + selection + \".\", 0, y, spacing)\n    basic.pause(2000)\n\n#ACTUAL CODE IS BELOW, NORMAL FUNCTIONS ABOVE\n\npins.set_pull(DigitalPin.P0, PinPullMode.PULL_UP)\npins.set_pull(DigitalPin.P1, PinPullMode.PULL_UP)\npins.set_pull(DigitalPin.P2, PinPullMode.PULL_UP)\n\n\n\n\nx = 0  # starting x position\ny = 0  # starting y position\nspacing = 1  # space between letters\ndraw_text(\"Preferred operating system?^1.  Android^2.  iOS^3.  No preference\", x, y, spacing)\nanswered = False\nwhile not answered:\n    if pins.digital_read_pin(DigitalPin.P0) == 0:\n        answered = True\n        a1 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"Android\", 9)\n    elif pins.digital_read_pin(DigitalPin.P1) == 0:\n        answered = True\n        a1 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"iOS\", 18)\n    elif pins.digital_read_pin(DigitalPin.P2) == 0:\n        answered = True\n        a1 = 3\n        OLED12864_I2C.clear()\n        draw_text(\"You did not have a preference.\", x, 27, spacing)\n        basic.pause(2000)\nOLED12864_I2C.clear()\nanswered = False\ndraw_text(\"What is your budget?^1.  $600 and below^2.  $600 to $900^3.  $900 and above\", x, y, spacing)\nwhile not answered:\n    if pins.digital_read_pin(DigitalPin.P0) == 0:\n        answered = True\n        a2 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"$600 and below\", 9)\n    elif pins.digital_read_pin(DigitalPin.P1) == 0:\n        answered = True\n        a2 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"$600 to $900\", 18)\n    elif pins.digital_read_pin(DigitalPin.P2) == 0:\n        answered = True\n        a2 = 3\n        OLED12864_I2C.clear()\n        you_chose(\"$900 and above\", 27)\nOLED12864_I2C.clear()\niPhoneSE = (a1 == 2 and a2 == 1)\nif iPhoneSE:\n    draw_text(\"A decision has been reached.^We recommend an iPhone SE.^It's the only iPhone under $600.^It is $399.\", x, y, spacing)\n    while True:\n        basic.pause(1)\nsixtyHziPhone = (a1 == 2 and a2 != 3)\nanswered = False\nif not sixtyHziPhone:\n    draw_text(\"Desired refresh rate?^1.  60Hz^2.  90Hz^3.  120Hz+\", x, y, spacing)\nelse:\n    draw_text('6.1\" or 6.7\" screen size?^1.  6.1\"^2.  6.7\"^3.  No preference ', x, y, spacing)\n    while not answered:\n        if pins.digital_read_pin(DigitalPin.P0) == 0:\n            answered = True\n            i1 = 1\n            OLED12864_I2C.clear()\n            you_chose('6.1\"', 9)\n        elif pins.digital_read_pin(DigitalPin.P1) == 0:\n            answered = True\n            i1 = 2\n            OLED12864_I2C.clear()\n            you_chose('6.7\"', 18)\n        elif pins.digital_read_pin(DigitalPin.P2) == 0:\n            answered = True\n            i1 = 3\n            OLED12864_I2C.clear()\n            draw_text(\"You did not have a preference.\", x, 27, spacing)\n            basic.pause(2000)\n    OLED12864_I2C.clear()\n    if i1 == 1:\n        draw_text(\"A decision has been reached.^We recommend an iPhone 16.^It's $799, within your budget.^It also has a 6.1 inch display.\", x, y, spacing)\n        while True:\n            basic.pause(1)\n    if i1 == 2:\n        draw_text(\"A decision has been reached.^We recommend an iPhone 16 Plus.^It's $899, barely in the budget.^It has a 6.7 inch display as well.\", x, y, spacing)\n        while True:\n            basic.pause(1)\n    if i1 == 3:\n        draw_text(\"Is $100 for a few more hours of^ battery life worth it to you?^1.  A few more hours is worth it^2.  I don't have a need for it\", x, y, spacing)\n        answered = False\n        while not answered:\n            if pins.digital_read_pin(DigitalPin.P0) == 0:\n                answered = True\n                i2 = 1\n                OLED12864_I2C.clear()\n                draw_text(\"You chose that it's worth it.\", x, 9, spacing)\n                basic.pause(2000)\n            elif pins.digital_read_pin(DigitalPin.P1) == 0:\n                answered = True\n                i2 = 2\n                OLED12864_I2C.clear()\n                draw_text(\"You chose it's not worth it.\", x, 18, spacing)\n                basic.pause(2000)\n        OLED12864_I2C.clear()\n        if i2 == 1:\n            draw_text(\"A decision has been reached.^We recommend an iPhone 16 Plus.^It's $899, barely in the budget.^It has the extra battery as well.\", x, y, spacing)\n            while True:\n                basic.pause(1)\n        if i2 == 2:\n            draw_text(\"A decision has been reached.^We recommend an iPhone 16.^It's $799, within the budget.^It still has great battery life.\", x, y, spacing)\n            while True:\n                basic.pause(1)\n    answered = True\nwhile not answered:\n    if pins.digital_read_pin(DigitalPin.P0) == 0:\n        answered = True\n        a3 = 1\n        OLED12864_I2C.clear()\n        you_chose(\"60Hz\", 9)\n    elif pins.digital_read_pin(DigitalPin.P1) == 0:\n        answered = True\n        a3 = 2\n        OLED12864_I2C.clear()\n        you_chose(\"90Hz\", 18)\n    elif pins.digital_read_pin(DigitalPin.P2) == 0:\n        answered = True\n        a3 = 3\n        OLED12864_I2C.clear()\n        you_chose(\"120Hz+\", 27)\n\n\n\n\n\ndraw_text(\"Currently under construction.\", 0, 0, 0)"}]}],"snapshots":[{"timestamp":1733724950155,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"saved final\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1733725066158}